// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderclient

import (
	"context"

	"cinema-ticket/service/order/rpc/types/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateReply     = order.CreateReply
	CreateReq       = order.CreateReq
	FindReply       = order.FindReply
	FindReq         = order.FindReq
	JudgeExistReply = order.JudgeExistReply
	JudgeExistReq   = order.JudgeExistReq
	SetPaidReply    = order.SetPaidReply
	SetPaidReq      = order.SetPaidReq

	Order interface {
		SetPaid(ctx context.Context, in *SetPaidReq, opts ...grpc.CallOption) (*SetPaidReply, error)
		JudgeExist(ctx context.Context, in *JudgeExistReq, opts ...grpc.CallOption) (*JudgeExistReply, error)
		FindById(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindReply, error)
		Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReply, error)
		CreateRevert(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReply, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) SetPaid(ctx context.Context, in *SetPaidReq, opts ...grpc.CallOption) (*SetPaidReply, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.SetPaid(ctx, in, opts...)
}

func (m *defaultOrder) JudgeExist(ctx context.Context, in *JudgeExistReq, opts ...grpc.CallOption) (*JudgeExistReply, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.JudgeExist(ctx, in, opts...)
}

func (m *defaultOrder) FindById(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindReply, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.FindById(ctx, in, opts...)
}

func (m *defaultOrder) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReply, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}

func (m *defaultOrder) CreateRevert(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReply, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateRevert(ctx, in, opts...)
}
