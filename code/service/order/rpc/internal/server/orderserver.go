// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"cinema-ticket/service/order/rpc/internal/logic"
	"cinema-ticket/service/order/rpc/internal/svc"
	"cinema-ticket/service/order/rpc/types/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) SetPaid(ctx context.Context, in *order.SetPaidReq) (*order.SetPaidReply, error) {
	l := logic.NewSetPaidLogic(ctx, s.svcCtx)
	return l.SetPaid(in)
}

func (s *OrderServer) JudgeExist(ctx context.Context, in *order.JudgeExistReq) (*order.JudgeExistReply, error) {
	l := logic.NewJudgeExistLogic(ctx, s.svcCtx)
	return l.JudgeExist(in)
}

func (s *OrderServer) FindById(ctx context.Context, in *order.FindReq) (*order.FindReply, error) {
	l := logic.NewFindByIdLogic(ctx, s.svcCtx)
	return l.FindById(in)
}

func (s *OrderServer) Create(ctx context.Context, in *order.CreateReq) (*order.CreateReply, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

func (s *OrderServer) CreateRevert(ctx context.Context, in *order.CreateReq) (*order.CreateReply, error) {
	l := logic.NewCreateRevertLogic(ctx, s.svcCtx)
	return l.CreateRevert(in)
}
