// Code generated by goctl. DO NOT EDIT.
// Source: film.proto

package filmclient

import (
	"context"

	"cinema-ticket/service/film/rpc/types/film"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DecStockReply   = film.DecStockReply
	DecStockReq     = film.DecStockReq
	FindReply       = film.FindReply
	FindReq         = film.FindReq
	JudgeExistReply = film.JudgeExistReply
	JudgeExistReq   = film.JudgeExistReq

	Film interface {
		JudgeExist(ctx context.Context, in *JudgeExistReq, opts ...grpc.CallOption) (*JudgeExistReply, error)
		FindById(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindReply, error)
		DecStock(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error)
		DecStockRevert(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error)
	}

	defaultFilm struct {
		cli zrpc.Client
	}
)

func NewFilm(cli zrpc.Client) Film {
	return &defaultFilm{
		cli: cli,
	}
}

func (m *defaultFilm) JudgeExist(ctx context.Context, in *JudgeExistReq, opts ...grpc.CallOption) (*JudgeExistReply, error) {
	client := film.NewFilmClient(m.cli.Conn())
	return client.JudgeExist(ctx, in, opts...)
}

func (m *defaultFilm) FindById(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindReply, error) {
	client := film.NewFilmClient(m.cli.Conn())
	return client.FindById(ctx, in, opts...)
}

func (m *defaultFilm) DecStock(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error) {
	client := film.NewFilmClient(m.cli.Conn())
	return client.DecStock(ctx, in, opts...)
}

func (m *defaultFilm) DecStockRevert(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error) {
	client := film.NewFilmClient(m.cli.Conn())
	return client.DecStockRevert(ctx, in, opts...)
}
