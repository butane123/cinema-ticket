// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: film.proto

package film

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilmClient is the client API for Film service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmClient interface {
	JudgeExist(ctx context.Context, in *JudgeExistReq, opts ...grpc.CallOption) (*JudgeExistReply, error)
	FindById(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindReply, error)
	DecStock(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error)
	DecStockRevert(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error)
}

type filmClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmClient(cc grpc.ClientConnInterface) FilmClient {
	return &filmClient{cc}
}

func (c *filmClient) JudgeExist(ctx context.Context, in *JudgeExistReq, opts ...grpc.CallOption) (*JudgeExistReply, error) {
	out := new(JudgeExistReply)
	err := c.cc.Invoke(ctx, "/film.film/judgeExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) FindById(ctx context.Context, in *FindReq, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := c.cc.Invoke(ctx, "/film.film/findById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) DecStock(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error) {
	out := new(DecStockReply)
	err := c.cc.Invoke(ctx, "/film.film/decStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) DecStockRevert(ctx context.Context, in *DecStockReq, opts ...grpc.CallOption) (*DecStockReply, error) {
	out := new(DecStockReply)
	err := c.cc.Invoke(ctx, "/film.film/decStockRevert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmServer is the server API for Film service.
// All implementations must embed UnimplementedFilmServer
// for forward compatibility
type FilmServer interface {
	JudgeExist(context.Context, *JudgeExistReq) (*JudgeExistReply, error)
	FindById(context.Context, *FindReq) (*FindReply, error)
	DecStock(context.Context, *DecStockReq) (*DecStockReply, error)
	DecStockRevert(context.Context, *DecStockReq) (*DecStockReply, error)
	mustEmbedUnimplementedFilmServer()
}

// UnimplementedFilmServer must be embedded to have forward compatible implementations.
type UnimplementedFilmServer struct {
}

func (UnimplementedFilmServer) JudgeExist(context.Context, *JudgeExistReq) (*JudgeExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JudgeExist not implemented")
}
func (UnimplementedFilmServer) FindById(context.Context, *FindReq) (*FindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedFilmServer) DecStock(context.Context, *DecStockReq) (*DecStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecStock not implemented")
}
func (UnimplementedFilmServer) DecStockRevert(context.Context, *DecStockReq) (*DecStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecStockRevert not implemented")
}
func (UnimplementedFilmServer) mustEmbedUnimplementedFilmServer() {}

// UnsafeFilmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmServer will
// result in compilation errors.
type UnsafeFilmServer interface {
	mustEmbedUnimplementedFilmServer()
}

func RegisterFilmServer(s grpc.ServiceRegistrar, srv FilmServer) {
	s.RegisterService(&Film_ServiceDesc, srv)
}

func _Film_JudgeExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgeExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).JudgeExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.film/judgeExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).JudgeExist(ctx, req.(*JudgeExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.film/findById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).FindById(ctx, req.(*FindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_DecStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).DecStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.film/decStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).DecStock(ctx, req.(*DecStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_DecStockRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).DecStockRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.film/decStockRevert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).DecStockRevert(ctx, req.(*DecStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Film_ServiceDesc is the grpc.ServiceDesc for Film service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Film_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "film.film",
	HandlerType: (*FilmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "judgeExist",
			Handler:    _Film_JudgeExist_Handler,
		},
		{
			MethodName: "findById",
			Handler:    _Film_FindById_Handler,
		},
		{
			MethodName: "decStock",
			Handler:    _Film_DecStock_Handler,
		},
		{
			MethodName: "decStockRevert",
			Handler:    _Film_DecStockRevert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "film.proto",
}
