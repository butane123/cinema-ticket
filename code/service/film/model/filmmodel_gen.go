// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filmFieldNames          = builder.RawFieldNames(&Film{})
	filmRows                = strings.Join(filmFieldNames, ",")
	filmRowsExpectAutoSet   = strings.Join(stringx.Remove(filmFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	filmRowsWithPlaceHolder = strings.Join(stringx.Remove(filmFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheFilmIdPrefix = "cache:film:id:"
)

type (
	filmModel interface {
		Insert(ctx context.Context, data *Film) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Film, error)
		Update(ctx context.Context, data *Film) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFilmModel struct {
		sqlc.CachedConn
		table string
	}

	Film struct {
		Id           int64     `db:"id"`
		Name         string    `db:"name"`           // 电影名称
		Desc         string    `db:"desc"`           // 电影描述
		Stock        int64     `db:"stock"`          // 影票库存
		Amount       int64     `db:"amount"`         // 影票金额
		Screenwriter string    `db:"screenwriter"`   // 影片编剧
		Director     string    `db:"director"`       // 影片导演
		Length       int64     `db:"length"`         // 影片时长
		IsSelectSeat int64     `db:"is_select_seat"` // 是否支持选座，1表示可以，0表示不可以
		CreateTime   time.Time `db:"create_time"`
		UpdateTime   time.Time `db:"update_time"`
	}
)

func newFilmModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFilmModel {
	return &defaultFilmModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`film`",
	}
}

func (m *defaultFilmModel) Delete(ctx context.Context, id int64) error {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, filmIdKey)
	return err
}

func (m *defaultFilmModel) FindOne(ctx context.Context, id int64) (*Film, error) {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, id)
	var resp Film
	err := m.QueryRowCtx(ctx, &resp, filmIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilmModel) Insert(ctx context.Context, data *Film) (sql.Result, error) {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, filmRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Desc, data.Stock, data.Amount, data.Screenwriter, data.Director, data.Length, data.IsSelectSeat)
	}, filmIdKey)
	return ret, err
}

func (m *defaultFilmModel) Update(ctx context.Context, data *Film) error {
	filmIdKey := fmt.Sprintf("%s%v", cacheFilmIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, filmRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Desc, data.Stock, data.Amount, data.Screenwriter, data.Director, data.Length, data.IsSelectSeat, data.Id)
	}, filmIdKey)
	return err
}

func (m *defaultFilmModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFilmIdPrefix, primary)
}

func (m *defaultFilmModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filmRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFilmModel) tableName() string {
	return m.table
}
