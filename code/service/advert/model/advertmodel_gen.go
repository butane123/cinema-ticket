// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	advertFieldNames          = builder.RawFieldNames(&Advert{})
	advertRows                = strings.Join(advertFieldNames, ",")
	advertRowsExpectAutoSet   = strings.Join(stringx.Remove(advertFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	advertRowsWithPlaceHolder = strings.Join(stringx.Remove(advertFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheAdvertIdPrefix = "cache:advert:id:"
)

type (
	advertModel interface {
		Insert(ctx context.Context, data *Advert) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Advert, error)
		Update(ctx context.Context, data *Advert) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAdvertModel struct {
		sqlc.CachedConn
		table string
	}

	Advert struct {
		Id         int64     `db:"id"`
		Title      string    `db:"title"`   // 标题
		Content    string    `db:"content"` // 内容
		IsCom      int64     `db:"is_com"`  // 广告性质，0表示普通公告，1表示商业广告，默认为0
		Status     int64     `db:"status"`  // 广告状态，0表示未失效，1表示已失效，默认为0
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
	}
)

func newAdvertModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAdvertModel {
	return &defaultAdvertModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`advert`",
	}
}

func (m *defaultAdvertModel) Delete(ctx context.Context, id int64) error {
	advertIdKey := fmt.Sprintf("%s%v", cacheAdvertIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, advertIdKey)
	return err
}

func (m *defaultAdvertModel) FindOne(ctx context.Context, id int64) (*Advert, error) {
	advertIdKey := fmt.Sprintf("%s%v", cacheAdvertIdPrefix, id)
	var resp Advert
	err := m.QueryRowCtx(ctx, &resp, advertIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", advertRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdvertModel) Insert(ctx context.Context, data *Advert) (sql.Result, error) {
	advertIdKey := fmt.Sprintf("%s%v", cacheAdvertIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, advertRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.IsCom, data.Status)
	}, advertIdKey)
	return ret, err
}

func (m *defaultAdvertModel) Update(ctx context.Context, data *Advert) error {
	advertIdKey := fmt.Sprintf("%s%v", cacheAdvertIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, advertRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Content, data.IsCom, data.Status, data.Id)
	}, advertIdKey)
	return err
}

func (m *defaultAdvertModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAdvertIdPrefix, primary)
}

func (m *defaultAdvertModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", advertRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAdvertModel) tableName() string {
	return m.table
}
